<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小卖部</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suminhohu.github.io/"/>
  <updated>2017-11-23T13:10:03.524Z</updated>
  <id>http://suminhohu.github.io/</id>
  
  <author>
    <name>Sumin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>for...in 和 for...of 的区别和联系</title>
    <link href="http://suminhohu.github.io/2017/11/23/js-02/"/>
    <id>http://suminhohu.github.io/2017/11/23/js-02/</id>
    <published>2017-11-23T13:00:56.000Z</published>
    <updated>2017-11-23T13:10:03.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for...in语句"></a><strong><code>for...in</code>语句</strong></h3><p>以任意顺序遍历一个对象的<a href="http://www.jianshu.com/p/83ae9c810735" target="_blank" rel="noopener">可枚举属性</a>。对于每个不同的属性，语句都会被执行。</p><p>描述<br>for… in 循环只遍历可枚举属性。像Array和Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如String的indexOf()方法或Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：for...in不应该用于迭代一个 Array，其中索引顺序很重要。</span><br></pre></td></tr></table></figure><p>数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。for … in循环语句将返回所有可枚举属性，包括非整数类型的名称和继承的那些。<br><a id="more"></a><br>因为迭代的顺序是依赖于执行环境的，所以数组遍历不一定按次序访问元素。<code>因此当迭代访问顺序很重要的数组时，最好用整数索引去进行for循环（或者使用 Array.prototype.forEach() 或 for...of 循环）</code>。</p><p>下面的函数接受一个对象作为参数。被调用时迭代传入对象的所有可枚举属性然后返回一个所有属性名和其对应值的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class="line">    </span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// &quot;obj.a = 1&quot;</span><br><span class="line">// &quot;obj.b = 2&quot;</span><br><span class="line">// &quot;obj.c = 3&quot;</span><br></pre></td></tr></table></figure></p><p>下面的函数说明了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" title="hasOwnProperty() 方法会返回一个布尔值，指示对象是否具有指定的属性作为自身（不继承）属性。" target="_blank" rel="noopener"><code>hasOwnProperty()</code></a>的用法：继承的属性不显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var triangle = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line"></span><br><span class="line">function ColoredTriangle() &#123;</span><br><span class="line">  this.color = &apos;red&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ColoredTriangle.prototype = triangle;</span><br><span class="line"></span><br><span class="line">var obj = new ColoredTriangle();</span><br><span class="line"></span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  if (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">    console.log(`obj.$&#123;prop&#125; = $&#123;obj[prop]&#125;`);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">// &quot;obj.color = red&quot;</span><br></pre></td></tr></table></figure><h3 id="for-of语句"><a href="#for-of语句" class="headerlink" title="for...of语句"></a><strong><code>for...of</code>语句</strong></h3><p>for…of语句在可迭代对象（包括Array，Map，Set，String，TypedArray，arguments对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</p><p>###迭代Array<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">    value += 1;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 11</span><br><span class="line">// 21</span><br><span class="line">// 31</span><br></pre></td></tr></table></figure></p><p>如果不想修改语句块中的变量,也可以使用const代替let。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (const value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><h3 id="迭代String"><a href="#迭代String" class="headerlink" title="迭代String"></a>迭代String</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = &quot;boo&quot;;</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;b&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure><h3 id="迭代Map"><a href="#迭代Map" class="headerlink" title="迭代Map"></a>迭代Map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);</span><br><span class="line"></span><br><span class="line">for (let entry of iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;a&quot;, 1]</span><br><span class="line">// [&quot;b&quot;, 2]</span><br><span class="line">// [&quot;c&quot;, 3]</span><br><span class="line"></span><br><span class="line">for (let [key, value] of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h3 id="迭代Set"><a href="#迭代Set" class="headerlink" title="迭代Set"></a>迭代Set</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h3 id="迭代-DOM-集合"><a href="#迭代-DOM-集合" class="headerlink" title="迭代 DOM 集合"></a>迭代 DOM 集合</h3><p>迭代DOM元素集合，比如一个NodeList对象：下面的例子演示给每一个article标签内的p标签添加一个”read”类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);</span><br><span class="line"></span><br><span class="line">for (let paragraph of articleParagraphs) &#123;</span><br><span class="line">  paragraph.classList.add(&quot;read&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="for…in与for…of的区别"><a href="#for…in与for…of的区别" class="headerlink" title="for…in与for…of的区别"></a>for…in与for…of的区别</h3><p>无论是for…in还是for…of语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。</p><h4 id="for…-in-语句以原始插入顺序迭代对象的可枚举属性。"><a href="#for…-in-语句以原始插入顺序迭代对象的可枚举属性。" class="headerlink" title="for… in 语句以原始插入顺序迭代对象的可枚举属性。"></a>for… in 语句以原始插入顺序迭代对象的可枚举属性。</h4><h4 id="for…of-语句遍历可迭代对象定义要迭代的数据"><a href="#for…of-语句遍历可迭代对象定义要迭代的数据" class="headerlink" title="for…of  语句遍历可迭代对象定义要迭代的数据"></a>for…of  语句遍历可迭代对象定义要迭代的数据</h4><p>以下示例显示了与Array一起使用时，for…of循环和for…in循环之间的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.objCustom = function() &#123;&#125;; </span><br><span class="line">Array.prototype.arrCustom = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let iterable = [3, 5, 7];</span><br><span class="line">iterable.foo = &apos;hello&apos;;</span><br><span class="line"></span><br><span class="line">//此循环仅以原始插入顺序记录iterable 对象的可枚举属性。它不记录数组元素3, 5, 7 或hello，</span><br><span class="line">//因为这些不是枚举属性。但是它记录了数组索引以及arrCustom和objCustom</span><br><span class="line">for (let i in iterable) &#123;</span><br><span class="line">  console.log(i); //  0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这个循环类似于第一个，但是它使用hasOwnProperty() 来检查，如果找到的枚举属性是对象自己的（不是继承的）。</span><br><span class="line">//如果是，该属性被记录。记录的属性是0, 1, 2和foo，因为它们是自身的属性（不是继承的）。</span><br><span class="line">//属性arrCustom和objCustom不会被记录，因为它们是继承的。</span><br><span class="line">for (let i in iterable) &#123;</span><br><span class="line">  if (iterable.hasOwnProperty(i)) &#123;</span><br><span class="line">    console.log(i); //  0, 1, 2, &quot;foo&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//该循环迭代并记录iterable作为可迭代对象定义的迭代值，这些是数组元素 3, 5, 7，而不是任何对象的属性。</span><br><span class="line">for (let i of iterable) &#123;</span><br><span class="line">  console.log(i); // 3, 5, 7</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>每个对象将继承objCustom属性，并且作为Array的每个对象将继承arrCustom属性，因为将这些属性添加到Object.prototype和Array.prototype。由于继承和原型链，对象iterable继承属性objCustom和arrCustom。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;for-in语句&quot;&gt;&lt;a href=&quot;#for-in语句&quot; class=&quot;headerlink&quot; title=&quot;for...in语句&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;code&gt;for...in&lt;/code&gt;语句&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;以任意顺序遍历一个对象的&lt;a href=&quot;http://www.jianshu.com/p/83ae9c810735&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;可枚举属性&lt;/a&gt;。对于每个不同的属性，语句都会被执行。&lt;/p&gt;
&lt;p&gt;描述&lt;br&gt;for… in 循环只遍历可枚举属性。像Array和Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如String的indexOf()方法或Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;提示：for...in不应该用于迭代一个 Array，其中索引顺序很重要。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。for … in循环语句将返回所有可枚举属性，包括非整数类型的名称和继承的那些。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://suminhohu.github.io/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://suminhohu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>12种应该避免使用的Javascript语法——《Javascript语言精粹》</title>
    <link href="http://suminhohu.github.io/2017/11/23/js-01/"/>
    <id>http://suminhohu.github.io/2017/11/23/js-01/</id>
    <published>2017-11-23T10:18:44.000Z</published>
    <updated>2017-11-23T11:31:36.786Z</updated>
    
    <content type="html"><![CDATA[<p>《Javascript语言精粹》这本书的附录挺实用的，列出了12种应该避免使用的Javascript语法，我们来看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Javascript有两组相等运算符，一组是==和!=，另一组是===和!==。````前者只比较值的相等，后者除了值以外，还比较类型是否相同。</span><br><span class="line">请尽量不要使用前一组，永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。如果你不相信的话，</span><br><span class="line">请回答下面五个判断式的值是true还是false：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　false == &apos;false&apos;</span><br><span class="line">　　false == undefined</span><br><span class="line">　　false == null</span><br><span class="line">　　null == undefined</span><br><span class="line">　　0 == &apos;&apos;</span><br></pre></td></tr></table></figure><p>前三个是false，后两个是true。<br><a id="more"></a></p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">with的本意是减少键盘输入。比如</span><br><span class="line">　　obj.a = obj.b;</span><br><span class="line">　　obj.c = obj.d;</span><br><span class="line">可以简写成</span><br><span class="line">　　with(obj) &#123;</span><br><span class="line">　　　　a = b;</span><br><span class="line">　　　　c = d;</span><br><span class="line">　　&#125;</span><br><span class="line">但是，在实际运行时，解释器会首先判断obj.b和obj.d是否存在，如果不存在的话，再判断全局变量b和d是否存在。这样就导致了低效率，</span><br><span class="line">而且可能会导致意外，因此最好不要使用with语句。</span><br></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eval用来直接执行一个字符串。这条语句也是不应该使用的，因为它有性能和安全性的问题，并且使得代码更难阅读。</span><br><span class="line">eval能够做到的事情，不用它也能做到。比如</span><br><span class="line">　　eval(&quot;myValue = myObject.&quot; + myKey + &quot;;&quot;);</span><br><span class="line">可以直接写成</span><br><span class="line">　　myValue = myObject[myKey];</span><br><span class="line">至于ajax操作返回的json字符串，可以使用官方网站提供的解析器json_parse.js运行。</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这条命令的作用是返回到循环的头部，但是循环本来就会返回到头部。所以通过适当的构造，完全可以避免使用这条命令，使得效率得到改善</span><br></pre></td></tr></table></figure><h3 id="switch-贯穿"><a href="#switch-贯穿" class="headerlink" title="switch 贯穿"></a>switch 贯穿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch结构中的case语句，默认是顺序执行，除非遇到break，return和throw。有的程序员喜欢利用这个特点，比如</span><br><span class="line">　　switch(n) &#123;</span><br><span class="line">　　　　case 1:</span><br><span class="line">　　　　case 2:</span><br><span class="line">　　　　　　break;</span><br><span class="line">　　&#125;</span><br><span class="line">这样写容易出错，而且难以发现。因此建议避免switch贯穿，凡是有case的地方，一律加上break。</span><br><span class="line">　　switch(n) &#123;</span><br><span class="line">　　　　case 1:</span><br><span class="line">　　　　　　break;</span><br><span class="line">　　　　case 2:</span><br><span class="line">　　　　　　break;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="单行的块结构"><a href="#单行的块结构" class="headerlink" title="单行的块结构"></a>单行的块结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if、while、do和for，都是块结构语句，但是也可以接受单行命令。比如</span><br><span class="line">　　if (ok) t = true;</span><br><span class="line">甚至写成</span><br><span class="line">　　if (ok)</span><br><span class="line">　　　　t = true;</span><br><span class="line">这样不利于阅读代码，而且将来添加语句时非常容易出错。建议不管是否只有一行命令，都一律加上大括号。</span><br><span class="line">　　if (ok)&#123;</span><br><span class="line">　　　　t = true;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="和–"><a href="#和–" class="headerlink" title="++和–"></a>++和–</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">递增运算符++和递减运算符--，直接来自C语言，表面上可以让代码变得很紧凑，但是实际上会让代码看上去更复杂和更晦涩。</span><br><span class="line">因此为了代码的整洁性和易读性，不用为好。</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Javascript完全套用了Java的位运算符，包括按位与&amp;、按位或|、按位异或^、按位非~、左移&lt;&lt;、带符号的右移&gt;&gt;和用0补足的右移&gt;&gt;&gt;。</span><br><span class="line">这套运算符针对的是整数，所以对Javascript完全无用，因为Javascript内部，所有数字都保存为双精度浮点数。如果使用它们的话，</span><br><span class="line">Javascript不得不将运算数先转为整数，然后再进行运算，这样就降低了速度。而且&quot;按位与运算符&quot;&amp;同&quot;逻辑与运算符&quot;&amp;&amp;，很容易混淆。</span><br></pre></td></tr></table></figure><h3 id="function语句"><a href="#function语句" class="headerlink" title="function语句"></a>function语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在Javascript中定义一个函数，有两种写法：</span><br><span class="line">　　function foo() &#123; &#125;</span><br><span class="line">和</span><br><span class="line">　　var foo = function () &#123; &#125;</span><br><span class="line">两种写法完全等价。但是在解析的时候，前一种写法会被解析器自动提升到代码的头部，因此违背了函数应该先定义后使用的要求，</span><br><span class="line">所以建议定义函数时，全部采用后一种写法。</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的包装对象"><a href="#基本数据类型的包装对象" class="headerlink" title="基本数据类型的包装对象"></a>基本数据类型的包装对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Javascript的基本数据类型包括字符串、数字、布尔值，它们都有对应的包装对象String、Number和Boolean。所以，有人会这样定义相关值：</span><br><span class="line">　　new String(&quot;Hello World&quot;);</span><br><span class="line">　　new Number(2000);</span><br><span class="line">　　new Boolean(false);</span><br><span class="line">这样写完全没有必要，而且非常费解，因此建议不要使用。</span><br><span class="line">另外，new Object和new Array也不建议使用，可以用&#123;&#125;和[]代替。</span><br></pre></td></tr></table></figure><h3 id="new语句"><a href="#new语句" class="headerlink" title="new语句"></a>new语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Javascript是世界上第一个被大量使用的支持Lambda函数的语言，本质上属于与Lisp同类的函数式编程语言。但是当前世界，</span><br><span class="line">90%以上的程序员都是使用面向对象编程。为了靠近主流，Javascript做出了妥协，采纳了类的概念，允许根据类生成对象。</span><br><span class="line">类是这样定义的：</span><br><span class="line">　　var Cat = function (name) &#123;</span><br><span class="line">　　　　this.name = name;</span><br><span class="line">　　　　this.saying = &apos;meow&apos; ;</span><br><span class="line">　　&#125;</span><br><span class="line">然后，再生成一个对象</span><br><span class="line">　　var myCat = new Cat(&apos;mimi&apos;);</span><br><span class="line">这种利用函数生成类、利用new生成对象的语法，其实非常奇怪，一点都不符合直觉。而且，使用的时候，很容易忘记加上new，</span><br><span class="line">就会变成执行函数，然后莫名其妙多出几个全局变量。所以，建议不要这样创建对象，而采用一种变通方法。</span><br><span class="line">Douglas Crockford给出了一个函数：</span><br><span class="line">　　Object.beget = function (o) &#123;</span><br><span class="line">　　　　var F = function (o) &#123;&#125;;</span><br><span class="line">　　　　F.prototype = o ;</span><br><span class="line">　　　　return new F;</span><br><span class="line">　　&#125;;</span><br><span class="line">创建对象时就利用这个函数，对原型对象进行操作：</span><br><span class="line">　　var Cat = &#123;</span><br><span class="line">　　　　name:&apos;&apos;,</span><br><span class="line">　　　　saying:&apos;meow&apos;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　var myCat = Object.beget(Cat);</span><br><span class="line">对象生成后，可以自行对相关属性进行赋值：</span><br><span class="line">　　myCat.name = &apos;mimi&apos;;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在大多数语言中，void都是一种类型，表示没有值。但是在Javascript中，void是一个运算符，接受一个运算数，并返回undefined。</span><br><span class="line">　　void 0; // undefined</span><br><span class="line">这个命令没什么用，而且很令人困惑，建议避免使用。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Javascript语言精粹》这本书的附录挺实用的，列出了12种应该避免使用的Javascript语法，我们来看一下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Javascript有两组相等运算符，一组是==和!=，另一组是===和!==。````前者只比较值的相等，后者除了值以外，还比较类型是否相同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请尽量不要使用前一组，永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。如果你不相信的话，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请回答下面五个判断式的值是true还是false：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　false == &amp;apos;false&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　false == undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　false == null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　null == undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　0 == &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前三个是false，后两个是true。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://suminhohu.github.io/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://suminhohu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>测试——我的第一篇文章</title>
    <link href="http://suminhohu.github.io/2017/11/23/myFirstBlog/"/>
    <id>http://suminhohu.github.io/2017/11/23/myFirstBlog/</id>
    <published>2017-11-23T08:48:45.000Z</published>
    <updated>2017-11-23T11:16:03.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用原生方法实现类似jquery的隐藏方法"><a href="#使用原生方法实现类似jquery的隐藏方法" class="headerlink" title="使用原生方法实现类似jquery的隐藏方法"></a>使用原生方法实现类似jquery的隐藏方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var F = function(selector, context) &#123;</span><br><span class="line">    return this.init(selector, context);</span><br><span class="line">&#125;;</span><br><span class="line">F.prototype.init = function(selector, context) &#123;</span><br><span class="line">    var nodeList = (context || document).querySelectorAll(selector);</span><br><span class="line">    this.length = nodeList.length;</span><br><span class="line">    for (var i=0; i&lt;this.length; i+=1) &#123;</span><br><span class="line">        this[i] = nodeList[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">F.prototype.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i], i, this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">F.prototype.hide = function() &#123;</span><br><span class="line">    this.each(function() &#123;</span><br><span class="line">       this.style.display = &quot;none&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var $ = function(selector, context) &#123;</span><br><span class="line">    return new F(selector, context);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;)[0].onclick = function() &#123;</span><br><span class="line">    $(&quot;img&quot;).hide();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用原生方法实现类似jquery的隐藏方法&quot;&gt;&lt;a href=&quot;#使用原生方法实现类似jquery的隐藏方法&quot; class=&quot;headerlink&quot; title=&quot;使用原生方法实现类似jquery的隐藏方法&quot;&gt;&lt;/a&gt;使用原生方法实现类似jquery的隐藏方法&lt;/
      
    
    </summary>
    
      <category term="胡说八道" scheme="http://suminhohu.github.io/categories/%E8%83%A1%E8%AF%B4%E5%85%AB%E9%81%93/"/>
    
    
      <category term="javascript" scheme="http://suminhohu.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
