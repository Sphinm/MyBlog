<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小卖部</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suminhohu.github.io/"/>
  <updated>2017-11-23T12:52:25.515Z</updated>
  <id>http://suminhohu.github.io/</id>
  
  <author>
    <name>Sumin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>for-in和for-of 的区别</title>
    <link href="http://suminhohu.github.io/2017/11/23/for-in-for-of/"/>
    <id>http://suminhohu.github.io/2017/11/23/for-in-for-of/</id>
    <published>2017-11-23T12:06:00.000Z</published>
    <updated>2017-11-23T12:52:25.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for...in语句"></a><strong><code>for...in</code>语句</strong></h3><p>以任意顺序遍历一个对象的<a href="http://www.jianshu.com/p/83ae9c810735" target="_blank" rel="noopener">可枚举属性</a>。对于每个不同的属性，语句都会被执行。</p><p>描述<br>for… in 循环只遍历可枚举属性。像Array和Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如String的indexOf()方法或Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：for...in不应该用于迭代一个 Array，其中索引顺序很重要。</span><br></pre></td></tr></table></figure><p>数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。for … in循环语句将返回所有可枚举属性，包括非整数类型的名称和继承的那些。</p><p>因为迭代的顺序是依赖于执行环境的，所以数组遍历不一定按次序访问元素。<code>因此当迭代访问顺序很重要的数组时，最好用整数索引去进行for循环（或者使用 Array.prototype.forEach() 或 for...of 循环）</code>。</p><p>下面的函数接受一个对象作为参数。被调用时迭代传入对象的所有可枚举属性然后返回一个所有属性名和其对应值的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class="line">    </span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// &quot;obj.a = 1&quot;</span><br><span class="line">// &quot;obj.b = 2&quot;</span><br><span class="line">// &quot;obj.c = 3&quot;</span><br></pre></td></tr></table></figure></p><p>下面的函数说明了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" title="hasOwnProperty() 方法会返回一个布尔值，指示对象是否具有指定的属性作为自身（不继承）属性。" target="_blank" rel="noopener"><code>hasOwnProperty()</code></a>的用法：继承的属性不显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var triangle = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line"></span><br><span class="line">function ColoredTriangle() &#123;</span><br><span class="line">  this.color = &apos;red&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ColoredTriangle.prototype = triangle;</span><br><span class="line"></span><br><span class="line">var obj = new ColoredTriangle();</span><br><span class="line"></span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  if (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">    console.log(`obj.$&#123;prop&#125; = $&#123;obj[prop]&#125;`);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">// &quot;obj.color = red&quot;</span><br></pre></td></tr></table></figure><h3 id="for-of语句"><a href="#for-of语句" class="headerlink" title="for...of语句"></a><strong><code>for...of</code>语句</strong></h3><p>for…of语句在可迭代对象（包括Array，Map，Set，String，TypedArray，arguments对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</p><p>###迭代Array<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">    value += 1;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 11</span><br><span class="line">// 21</span><br><span class="line">// 31</span><br></pre></td></tr></table></figure></p><p>如果不想修改语句块中的变量,也可以使用const代替let。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (const value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><h3 id="迭代String"><a href="#迭代String" class="headerlink" title="迭代String"></a>迭代String</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = &quot;boo&quot;;</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;b&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure><h3 id="迭代Map"><a href="#迭代Map" class="headerlink" title="迭代Map"></a>迭代Map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);</span><br><span class="line"></span><br><span class="line">for (let entry of iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;a&quot;, 1]</span><br><span class="line">// [&quot;b&quot;, 2]</span><br><span class="line">// [&quot;c&quot;, 3]</span><br><span class="line"></span><br><span class="line">for (let [key, value] of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h3 id="迭代Set"><a href="#迭代Set" class="headerlink" title="迭代Set"></a>迭代Set</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h3 id="迭代-DOM-集合"><a href="#迭代-DOM-集合" class="headerlink" title="迭代 DOM 集合"></a>迭代 DOM 集合</h3><p>迭代DOM元素集合，比如一个NodeList对象：下面的例子演示给每一个article标签内的p标签添加一个”read”类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);</span><br><span class="line"></span><br><span class="line">for (let paragraph of articleParagraphs) &#123;</span><br><span class="line">  paragraph.classList.add(&quot;read&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="for…in与for…of的区别"><a href="#for…in与for…of的区别" class="headerlink" title="for…in与for…of的区别"></a>for…in与for…of的区别</h3><p>无论是for…in还是for…of语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。</p><h4 id="for…-in-语句以原始插入顺序迭代对象的可枚举属性。"><a href="#for…-in-语句以原始插入顺序迭代对象的可枚举属性。" class="headerlink" title="for… in 语句以原始插入顺序迭代对象的可枚举属性。"></a>for… in 语句以原始插入顺序迭代对象的可枚举属性。</h4><h4 id="for…of-语句遍历可迭代对象定义要迭代的数据"><a href="#for…of-语句遍历可迭代对象定义要迭代的数据" class="headerlink" title="for…of  语句遍历可迭代对象定义要迭代的数据"></a>for…of  语句遍历可迭代对象定义要迭代的数据</h4><p>以下示例显示了与Array一起使用时，for…of循环和for…in循环之间的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.objCustom = function() &#123;&#125;; </span><br><span class="line">Array.prototype.arrCustom = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let iterable = [3, 5, 7];</span><br><span class="line">iterable.foo = &apos;hello&apos;;</span><br><span class="line"></span><br><span class="line">//此循环仅以原始插入顺序记录iterable 对象的可枚举属性。它不记录数组元素3, 5, 7 或hello，</span><br><span class="line">//因为这些不是枚举属性。但是它记录了数组索引以及arrCustom和objCustom</span><br><span class="line">for (let i in iterable) &#123;</span><br><span class="line">  console.log(i); //  0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这个循环类似于第一个，但是它使用hasOwnProperty() 来检查，如果找到的枚举属性是对象自己的（不是继承的）。</span><br><span class="line">//如果是，该属性被记录。记录的属性是0, 1, 2和foo，因为它们是自身的属性（不是继承的）。</span><br><span class="line">//属性arrCustom和objCustom不会被记录，因为它们是继承的。</span><br><span class="line">for (let i in iterable) &#123;</span><br><span class="line">  if (iterable.hasOwnProperty(i)) &#123;</span><br><span class="line">    console.log(i); //  0, 1, 2, &quot;foo&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//该循环迭代并记录iterable作为可迭代对象定义的迭代值，这些是数组元素 3, 5, 7，而不是任何对象的属性。</span><br><span class="line">for (let i of iterable) &#123;</span><br><span class="line">  console.log(i); // 3, 5, 7</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>每个对象将继承objCustom属性，并且作为Array的每个对象将继承arrCustom属性，因为将这些属性添加到Object.prototype和Array.prototype。由于继承和原型链，对象iterable继承属性objCustom和arrCustom。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;for-in语句&quot;&gt;&lt;a href=&quot;#for-in语句&quot; class=&quot;headerlink&quot; title=&quot;for...in语句&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;code&gt;for...in&lt;/code&gt;语句&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;以任意顺序遍历一个对象的
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://suminhohu.github.io/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://suminhohu.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
